package com.example.car.repository;

import com.example.car.model.Car;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;
import org.springframework.boot.test.autoconfigure.orm.jpa.TestEntityManager;

import static org.assertj.core.api.AssertionsForClassTypes.assertThat;

/**
 * Design Assumptions:
 * 1. We use Spring Data JPA.
 * 2. ID will be autogenerated
 * 3. Car is a model object
 * 4. We will use interfaces to interact with repository and use dependency injection while running
 * <p>
 * Requirements derived from higher-level tests (Contract tests in this case):
 * 1. Car has id, name and type (See: src/test/resources/contracts/car/shouldReturnCars.groovy)
 * 2. Should return all cars when queried.
 */
@DataJpaTest
public class CarRepositoryTest {

    @Autowired
    private CarRepository repository;

    @Autowired
    private TestEntityManager testEntityManager;

    @Test
    public void shouldAutoGenerateId()  {
        Car persistedCar = testEntityManager.persistFlushFind(new Car("prius", "hybrid"));
        assertThat(persistedCar.getId()).isNotNull();
    }
}
